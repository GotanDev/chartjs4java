package be.ceau.chart.options.scales;

import be.ceau.chart.options.ticks.Ticks;

/** Abstract view for axis with common properties.
 * @param <T>
 */
public abstract class Axis<T extends Ticks<T>> {
    /**
     * @see #setTicks(Ticks)
     */
    private T ticks;

    /**
     * Default {@code "linear"}
     *
     * @see #setType(String type)
     */
    private String type;

    /**
     * Default {@code true}
     *
     * @see #setDisplay(Boolean display)
     */
    private Boolean display;



    /**
     * Default {@code "y-axis-0"}
     *
     * @see #setId(String id)
     */
    private String id;

    /**
     * Default {@code false}
     *
     * @see #setStacked(Boolean stacked)
     */
    private Boolean stacked;

    /**
     * Default {@code false}
     *
     * @see #setPosition(String position)
     */
    private String position;

    private Time time;

    private boolean offset;

    private String distribution = "linear";

    public String getDistribution() {
        return distribution;
    }

    public void setDistribution(String distribution) {
        this.distribution = distribution;
    }

    public Time getTime() {
        return time;
    }

    public void setTime(Time time) {
        this.time = time;
    }

    public boolean isOffset() {
        return offset;
    }

    public void setOffset(boolean offset) {
        this.offset = offset;
    }

    /**
     * @see #setTicks(Ticks)
     */
    public T getTicks() {
        return ticks;
    }

    /**
     * Defines options for the tick marks that are generated by the axis
     */
    public Axis<T> setTicks(T ticks) {
        this.ticks = ticks;
        return this;
    }

    /**
     * @see #setType(String type)
     */
    public String getType() {
        return this.type;
    }

    /**
     * As defined in Scales.
     */
    public Axis<T> setType(String type) {
        this.type = type;
        return this;
    }

    /**
     * @see #setDisplay(Boolean display)
     */
    public Boolean getDisplay() {
        return this.display;
    }

    /**
     * If true, show the scale.
     */
    public Axis<T> setDisplay(Boolean display) {
        this.display = display;
        return this;
    }

    /**
     * @see #setId(String id)
     */
    public String getId() {
        return this.id;
    }

    /**
     * Id of the axis so that data can bind to it.
     */
    public Axis<T> setId(String id) {
        this.id = id;
        return this;
    }

    /**
     * @see #setStacked(Boolean stacked)
     */
    public Boolean getStacked() {
        return this.stacked;
    }

    /**
     * If true, bars are stacked on the y-axis
     */
    public Axis<T> setStacked(Boolean stacked) {
        this.stacked = stacked;
        return this;
    }

    /**
     * @see #setPosition(String position)
     */
    public String getPosition() {
        return this.position;
    }

    /**
     * Position of the vertical axis (RIGHT / LEFT)
     */
    public Axis<T> setPosition(String position) {
        this.position = position;
        return this;
    }

}
